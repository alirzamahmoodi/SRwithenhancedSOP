"""
Django settings for dashboard project.

Generated by 'django-admin startproject' using Django X.Y.

For more information on this file, see
https://docs.djangoproject.com/en/X.Y/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/X.Y/ref/settings/
"""

import os
from pathlib import Path
import yaml

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Project directory: dashboard/
PROJECT_DIR = Path(__file__).resolve().parent
# Base directory: workspace root (one level up from PROJECT_DIR's parent)
BASE_DIR = PROJECT_DIR.parent.parent 

# Load shared configuration from root config.yaml
CONFIG_PATH = BASE_DIR / "config.yaml"

def load_shared_config(config_path):
    try:
        with open(config_path, 'r') as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        # Handle case where config.yaml might not exist during initial setup
        print(f"Warning: {config_path} not found. Using default settings where applicable.")
        return {}
    except Exception as e:
        print(f"Error loading {config_path}: {e}")
        return {}

config = load_shared_config(CONFIG_PATH)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/X.Y/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Generate a secret key if needed: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
SECRET_KEY = config.get('DJANGO_SECRET_KEY', 'django-insecure-placeholder-replace-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.get('DJANGO_DEBUG', True) # Default to True for development

ALLOWED_HOSTS = config.get('DJANGO_ALLOWED_HOSTS', []) # Default to empty list


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'study_dashboard', # Add our dashboard app here
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dashboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Add BASE_DIR / 'dashboard' / 'templates' to DIRS
        'DIRS': [BASE_DIR / 'dashboard' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dashboard.wsgi.application'


# Database
# https://docs.djangoproject.com/en/X.Y/ref/settings/#databases
# Using Djongo to connect to MongoDB

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': config.get("MONGODB_DATABASE", "audio_transcriber_db"),
        'CLIENT': {
            'host': config.get("MONGODB_URI", "mongodb://localhost:27017/"),
            # Add other MongoClient options here if needed (e.g., auth)
            # 'username': config.get("MONGODB_USER"),
            # 'password': config.get("MONGODB_PASSWORD"),
            # 'authSource': config.get("MONGODB_AUTH_SOURCE", "admin"),
            # 'authMechanism': config.get("MONGODB_AUTH_MECHANISM", "SCRAM-SHA-1")
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/X.Y/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/X.Y/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = config.get('TIME_ZONE', 'UTC')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/X.Y/howto/static-files/

STATIC_URL = 'static/'
# Add a directory for project-wide static files if needed
# STATICFILES_DIRS = [ BASE_DIR / 'dashboard' / 'static' ]


# Default primary key field type
# https://docs.djangoproject.com/en/X.Y/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add any custom settings from config.yaml that the Django app might need
# Example: GEMINI_API_KEY = config.get('GEMINI_API_KEY')

# Logging configuration (optional, can customize further)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
} 